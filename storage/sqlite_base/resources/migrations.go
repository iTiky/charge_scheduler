// Code generated by go-bindata. DO NOT EDIT.
// sources:
// storage/sqlite_base/migrations/01_initial.down.sql (35B)
// storage/sqlite_base/migrations/01_initial.up.sql (444B)

package resources

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xce\xcc\x4b\xcf\x49\x8d\x4f\x2d\x4b\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\xf6\x7c\xd1\x90\x23\x00\x00\x00")

func _01_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initialDownSql,
		"01_initial.down.sql",
	)
}

func _01_initialDownSql() (*asset, error) {
	bytes, err := _01_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_initial.down.sql", size: 35, mode: os.FileMode(0644), modTime: time.Unix(1613860110, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x6a, 0xa1, 0x95, 0x3d, 0x99, 0xac, 0x4, 0x55, 0xf0, 0xa7, 0x2d, 0xbf, 0x36, 0x4e, 0xff, 0x5, 0xf9, 0x75, 0xfe, 0x4, 0x35, 0xd7, 0x9, 0x3, 0x41, 0xf3, 0xdc, 0xd8, 0x88, 0x16, 0xd3}}
	return a, nil
}

var __01_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xc1\x8a\xc2\x30\x10\xc6\xf1\x7b\x9e\x62\x8e\xbb\xb0\x6f\xb0\xa7\xee\x32\x48\xa1\xad\x52\x47\xf0\x16\x42\x33\x68\xa0\x4d\x4b\x32\x15\x7c\x7b\x51\x7b\xa8\xd6\x6a\x73\xca\xe1\xcf\x97\xfc\xfe\x4b\x4c\x08\x81\x92\xbf\x0c\x21\x3a\x7f\xa8\x59\xf3\x89\xbd\x44\xf5\xa5\x00\x00\xe4\xdc\x31\x8c\x0e\xe1\x9e\xee\xb7\x62\x4d\x50\xec\xb2\xec\xe7\xd6\x45\x31\x41\xb4\x35\xc2\x5a\x5c\xc3\x40\x69\x8e\x5b\x4a\xf2\xcd\x53\xc7\xde\xea\x63\xdb\x87\x38\xec\xa5\x05\xe1\x0a\xcb\xc9\xde\xb5\x6b\x9c\xef\x85\xe3\xdb\xae\x0a\x6c\x84\xad\x36\x32\xfc\x6f\xf2\xae\xfa\xfe\x55\xea\xc1\xd9\x71\x70\xad\x75\xd5\xbc\x74\x4e\x19\x42\x5f\xf3\x87\x66\x2c\x5c\xa2\x5b\x22\x7b\xa9\xba\x04\x00\x00\xff\xff\x02\x05\x83\xa5\xbc\x01\x00\x00")

func _01_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_initialUpSql,
		"01_initial.up.sql",
	)
}

func _01_initialUpSql() (*asset, error) {
	bytes, err := _01_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_initial.up.sql", size: 444, mode: os.FileMode(0644), modTime: time.Unix(1613874251, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x7b, 0xc5, 0xf6, 0xc1, 0x8a, 0x9e, 0x9c, 0xea, 0x0, 0x53, 0xd4, 0x8f, 0xda, 0x5b, 0xdb, 0xdd, 0xe0, 0x79, 0xef, 0x46, 0xa7, 0x9d, 0x9, 0xe3, 0xab, 0x62, 0xd5, 0xcb, 0x23, 0x4b, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_initial.down.sql": _01_initialDownSql,
	"01_initial.up.sql":   _01_initialUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_initial.down.sql": {_01_initialDownSql, map[string]*bintree{}},
	"01_initial.up.sql": {_01_initialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
